class Solution {
public:
    int pivotIndex(vector<int>& nums) {
      int n=nums.size();
      for(int i=0;i<n;i++)
      {
          int leftsum=0,rightsum=0;

          for(int j=0;j<i;j++)          
          leftsum=leftsum+nums[j];
          

          for(int j=i+1;j<n;j++) 
          rightsum=rightsum+nums[j];
        

          if(leftsum == rightsum)
          return i;
      }
      return -1;
    }
};

//___________________________________________________________________________________


//Here I solved this problem with O(n) timecomplexity


    class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        // This is very simple and easy maths problem
        // According to question
        // LeftSum + PivotIndex + rightSum = totalSum
        // --> thereFore, pivotIndex = totalSum - 2leftSum (because , leftSum = rightSum)

        // finding the totalSum
        int totalSum = 0;
        for(int i = 0; i<nums.size(); i++){
            totalSum += nums[i];
        }

        int leftSum = 0;
        for(int i = 0; i<nums.size(); i++){
            if(nums[i] == totalSum - 2*leftSum){
                return i;
            }
            leftSum += nums[i];
        }

        return -1;
    }
};
